// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	participant "vac/features/participant"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// AcceptParticipant provides a mock function with given fields: _a0
func (_m *Repository) AcceptParticipant(_a0 int) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ApplyParticipant provides a mock function with given fields: _a0
func (_m *Repository) ApplyParticipant(_a0 participant.ParticipantCore) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(participant.ParticipantCore) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CountParicipantByUserId provides a mock function with given fields: userId
func (_m *Repository) CountParicipantByUserId(userId int) (int, error) {
	ret := _m.Called(userId)

	var r0 int
	if rf, ok := ret.Get(0).(func(int) int); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CountParticipantByVac provides a mock function with given fields: vacId
func (_m *Repository) CountParticipantByVac(vacId int) (int, error) {
	ret := _m.Called(vacId)

	var r0 int
	if rf, ok := ret.Get(0).(func(int) int); ok {
		r0 = rf(vacId)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(vacId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteParticipant provides a mock function with given fields: _a0
func (_m *Repository) DeleteParticipant(_a0 participant.ParticipantCore) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(participant.ParticipantCore) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetParticipantByID provides a mock function with given fields: _a0
func (_m *Repository) GetParticipantByID(_a0 int) (participant.ParticipantCore, error) {
	ret := _m.Called(_a0)

	var r0 participant.ParticipantCore
	if rf, ok := ret.Get(0).(func(int) participant.ParticipantCore); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(participant.ParticipantCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetParticipantByNIK provides a mock function with given fields: nik
func (_m *Repository) GetParticipantByNIK(nik string) (bool, error) {
	ret := _m.Called(nik)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(nik)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(nik)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetParticipantByUserID provides a mock function with given fields: _a0
func (_m *Repository) GetParticipantByUserID(_a0 int) ([]participant.ParticipantCore, error) {
	ret := _m.Called(_a0)

	var r0 []participant.ParticipantCore
	if rf, ok := ret.Get(0).(func(int) []participant.ParticipantCore); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]participant.ParticipantCore)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetParticipantByVacID provides a mock function with given fields: _a0
func (_m *Repository) GetParticipantByVacID(_a0 int) ([]participant.ParticipantCore, error) {
	ret := _m.Called(_a0)

	var r0 []participant.ParticipantCore
	if rf, ok := ret.Get(0).(func(int) []participant.ParticipantCore); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]participant.ParticipantCore)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetParticipantMultiParam provides a mock function with given fields: _a0, _a1
func (_m *Repository) GetParticipantMultiParam(_a0 int, _a1 int) (participant.ParticipantCore, error) {
	ret := _m.Called(_a0, _a1)

	var r0 participant.ParticipantCore
	if rf, ok := ret.Get(0).(func(int, int) participant.ParticipantCore); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(participant.ParticipantCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RejectParticipant provides a mock function with given fields: _a0
func (_m *Repository) RejectParticipant(_a0 int) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateParticipant provides a mock function with given fields: data
func (_m *Repository) UpdateParticipant(data participant.ParticipantCore) error {
	ret := _m.Called(data)

	var r0 error
	if rf, ok := ret.Get(0).(func(participant.ParticipantCore) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
